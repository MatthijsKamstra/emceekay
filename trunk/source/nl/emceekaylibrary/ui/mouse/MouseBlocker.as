/** * Modified the class to use <code>TweenLite</code> for animation *  * created some default values,  * <code>scaleToStage</code> or <code>setDimensions</code> and <code>setStyle</code> don't have to be set..  * (but it's clever to do) *  * :) *///package com.epologee.ui.mouse {package nl.emceekaylibrary.ui.mouse {	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.TweenPlugin;	import com.greensock.TweenLite;	import flash.display.Sprite;	import flash.display.Stage;	import flash.geom.Point;	import flash.utils.getQualifiedClassName;		/**	 * Block input from mouse 	 * 	 * @author Matthijs Kamstra aka [mck]	 * @author Eric-Paul Lecluse | epologee.com (c) 2008	 * @example	 		var blockerContainer:Sprite = new Sprite();			addChild(blockerContainer);						var _mouseBlocker:MouseBlocker = new MouseBlocker(blockerContainer);			//_mouseBlocker.scaleToStage(this.stage); 			// block stage (width/height)			_mouseBlocker.setDimensions(new Point(75, 100)); 	// Point.x will be used for width, Point.y for the height			_mouseBlocker.setStyle(0xff3333, .5);				// color and alpha			_mouseBlocker.block(); 								// block now	 * 	 * @see	http://code.google.com/p/epologee/source/browse/#svn/trunk/reusabilitee/com/epologee/ui/mouse	 * @see http://www.tweenmax.com	 * 	 */	public class MouseBlocker 	{		private var _target			:Sprite;		private var _dimensions		:Point		= new Point (100,100);	// default size: 100x100px		private var _alpha			:Number		= 0; 					// default style: alpha 		private var _color			:uint 		= 0x000000; 			// default style: color of the blocker		private var _stage			:Stage;		private var _isBlocking		:Boolean;		/**		 * constructor 		 * which sprite do you want to place your blocker in ?		 * 		 * @param	inTarget	A Sprite object is similar to a movie clip, but does not have a timeline		 */		public function MouseBlocker(inTarget:Sprite) 		{			_target = inTarget;						TweenPlugin.activate([AutoAlphaPlugin]);		}				/**		 * use dimensions for the mouse blocker (block a part of the application)		 * 		 * @param	inDimensions	Point.x will be used for width, Point.y for the height		 */		public function setDimensions(inDimensions:Point):void 		{			_dimensions = inDimensions;		}		/**		 * set the style of the mouse-blocker: color and alpha		 * 		 * @param	inColor		The color of the blocker (default color is black)		 * @param	inAlpha		The Alpha of the blocker (if > 0, animations is used to show blocker)		 */		public function setStyle(inColor:uint = 0x000000, inAlpha:Number = 0):void 		{			_color = inColor;			_alpha = inAlpha;		}				/**		 * use this to block the whole stage		 * 		 * @param	inStage 	The Stage class represents the main drawing area. 		 */		public function scaleToStage(inStage:Stage):void 		{			_stage = inStage;		}		/**		 * block mouse input		 * <ul>		 * 		<li>blocking is active, do nothing</li>		 * 		<li>scaleToStage or Dimentions not defined, do nothing</li>		 * 		<li>create graphic used for blocking</li>		 * 		<li>default alpha of mouseBlocker is > 0, an fadeout is used</li>		 * </ul>		 * 		 * @example		_mouseBlocker.block();		 */		public function block():void 		{			if (_isBlocking) return;			_isBlocking = true;			_target.buttonMode = true;			_target.mouseChildren = false;			_target.useHandCursor = false;						if (!_stage && !_dimensions) return;						var size:Point;			if (_stage) {				size = new Point(_stage.stageWidth, _stage.stageHeight);			} else {				size = _dimensions;			}						_target.graphics.clear();			_target.graphics.beginFill(_color, _alpha);			_target.graphics.drawRect(0, 0, size.x, size.y);			_target.graphics.endFill();						if (_alpha > 0) {				_target.alpha = 0;				TweenLite.to (_target, 0.5, {autoAlpha:1 } );			}		}		/**		 * unblock mouse input		 * if default alpha of mouseBlocker is > 0, an fadeout is used		 * 		 * @example		_mouseBlocker.unblock();		 */		public function unblock():void 		{			if (!_isBlocking) return;			if (_alpha > 0) {				TweenLite.to (_target, 0.5, {autoAlpha:0 } );			} else {				_target.visible = false;			}			_isBlocking = false;		}		/**		 * get className		 */		public function toString():String 		{			return getQualifiedClassName(this);		}	}}